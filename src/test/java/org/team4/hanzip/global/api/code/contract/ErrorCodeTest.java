package org.team4.hanzip.global.api.code.contract;

/*
 Note: Tests generated by CodeRabbit Inc.
 Testing library and framework: JUnit 5 (Jupiter) using standard JUnit Assertions.
 Focus: Validate ErrorCode enum properties, messages, HttpStatus linkage, and enum behaviors.
*/

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Test;
import org.springframework.http.HttpStatus;
import org.team4.hanzip.global.api.code.ErrorResultCode;

import static org.junit.jupiter.api.Assertions.*;

public class ErrorCodeTest {

    @Nested
    @DisplayName("Enum contract and basic behaviors")
    class EnumContract {

        @Test
        @DisplayName("ErrorCode implements ErrorResultCode for all constants")
        void implementsErrorResultCode() {
            for (ErrorCode code : ErrorCode.values()) {
                assertTrue(code instanceof ErrorResultCode, "Enum constant does not implement ErrorResultCode: " + code);
            }
        }

        @Test
        @DisplayName("values() returns all defined constants in declared order")
        void valuesContainsAll() {
            ErrorCode[] expected = {
                    ErrorCode.INVALID_ARGUMENT,
                    ErrorCode.CONTRACT_NOT_FOUND
            };
            assertArrayEquals(expected, ErrorCode.values(), "values() should contain all error codes in declaration order");
        }

        @Test
        @DisplayName("valueOf returns the correct enum for valid names")
        void valueOfValid() {
            assertEquals(ErrorCode.INVALID_ARGUMENT, ErrorCode.valueOf("INVALID_ARGUMENT"));
            assertEquals(ErrorCode.CONTRACT_NOT_FOUND, ErrorCode.valueOf("CONTRACT_NOT_FOUND"));
        }

        @Test
        @DisplayName("valueOf throws IllegalArgumentException for invalid names")
        void valueOfInvalid() {
            assertThrows(IllegalArgumentException.class, () -> ErrorCode.valueOf("UNKNOWN_CODE"));
        }
    }

    @Nested
    @DisplayName("Property validations for each error code")
    class Properties {

        @Test
        @DisplayName("INVALID_ARGUMENT has BAD_REQUEST status and expected message")
        void invalidArgumentProperties() {
            assertEquals(HttpStatus.BAD_REQUEST, ErrorCode.INVALID_ARGUMENT.getStatus());
            assertEquals("올바르지 않은 요청값입니다.", ErrorCode.INVALID_ARGUMENT.getMessage());
        }

        @Test
        @DisplayName("CONTRACT_NOT_FOUND has NOT_FOUND status and expected message")
        void contractNotFoundProperties() {
            assertEquals(HttpStatus.NOT_FOUND, ErrorCode.CONTRACT_NOT_FOUND.getStatus());
            assertEquals("데이터가 존재하지 않습니다.", ErrorCode.CONTRACT_NOT_FOUND.getMessage());
        }

        @Test
        @DisplayName("All error codes expose non-null HttpStatus and non-blank messages")
        void allCodesHaveValidFields() {
            for (ErrorCode code : ErrorCode.values()) {
                assertNotNull(code.getStatus(), "status should not be null for: " + code);
                String msg = code.getMessage();
                assertNotNull(msg, "message should not be null for: " + code);
                assertFalse(msg.trim().isEmpty(), "message should not be blank for: " + code);
            }
        }
    }
}